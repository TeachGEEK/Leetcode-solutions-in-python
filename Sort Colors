Problem Statement :
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
Example 3:

Input: nums = [0]
Output: [0]
Example 4:

Input: nums = [1]
Output: [1]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?


Solution Approch 1: Dutch National Flag : Time Complexity O(n) , Space Complexity O(1) : Probably the most optimised methoud

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n=len(nums);
        low = 0;
        mid = 0;
        high = n-1;
        while mid <= high:
            if nums[mid]==0 :
                nums[low], nums[mid] = nums[mid], nums[low];
                mid=mid+1;
                low=low+1;
            elif nums[mid]==1 :
                mid=mid+1
            else :
                nums[high], nums[mid]=nums[mid], nums[high];
                # mid=mid+1;
                high=high-1;
        return nums;
                
                 :
Solution Approch 2 : Count the number of 0,1,2 then fill that number of 1,2,3 in the array : Time Complexity O(2n) ,Space Complexcity: o(1) 


class Solution:
    def sortColors(self, nums: List[int]) -> None:
        count0=0
        count1=0
        count2=0
        for i in range(len(nums)):
            if nums[i]==2:
                count2+=1
            if nums[i]==1:
                count1+=1
            if nums[i]==0:
                count0+=1
        for i in range(count0):
            nums[i]=0
        for i in range(count0,(count0+count1)):
            nums[i]=1
        for i in range(count0+count1,len(nums)):
            nums[i]=2
        return nums;


Solution Approch 3: Probably the wrost solution in tearms of optimisation : Bubble Short : Time Complexity O(n^2) ,Space Complexcity: o(2) 


class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums);
        for i in range(0,n) :
            for j in range(0,n-i-1) :
                if nums[j]>nums[j+1]  :
                    temp = nums[j];
                    nums[j]=nums[j+1];
                    nums[j+1]=temp;
        return nums;
        
        
        
   
