Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 3 * 104
-105 <= nums[i] <= 105
 

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.




solution approach 1: 

import sys
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        oldmax=-sys.maxsize - 1;
        n=len(nums);
        for i in range (0,n):
            csum=0;
            for j in range (i,n):
                csum= csum + nums[j];
                if csum>oldmax:
                    oldmax=csum;
        return oldmax;
            
            
Approch 2 : kandane's algoritham : best approch :Time complexity : O(n):
   
   
   
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        oldmax=nums[0];
        currentmax=0;
        n=len(nums);
        for i in range (0,n):
            currentmax+=nums[i];
            if currentmax>oldmax :
                oldmax= currentmax;
            if currentmax<0 :
                currentmax=0;
        return oldmax;
            
            
