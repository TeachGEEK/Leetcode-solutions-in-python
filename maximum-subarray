Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 3 * 104
-105 <= nums[i] <= 105
 

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.




solution approach 1: 

import sys
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        oldmax=-sys.maxsize - 1;
        n=len(nums);
        for i in range (0,n):
            csum=0;
            for j in range (i,n):
                csum= csum + nums[j];
                if csum>oldmax:
                    oldmax=csum;
        return oldmax;
            
            
Approch 2 : kandane's algoritham : best approch :Time complexity : O(n):
   
   
   
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        oldmax=nums[0];
        currentmax=0;
        n=len(nums);
        for i in range (0,n):
            currentmax+=nums[i];
            if currentmax>oldmax :
                oldmax= currentmax;
            if currentmax<0 :
                currentmax=0;
        return oldmax;
            
            

<!==========================================some extra question based upon the same concept ===============================================>
Question : 
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104



Solution: 

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n=len(prices);
        max_profit=0;
        best_price_to_buy=prices[0];
        for i in range(0,n) :
            if prices[i]<best_price_to_buy:
                best_price_to_buy=prices[i];
            if prices[i]>best_price_to_buy :
                profit =  prices[i] - best_price_to_buy;
                if profit>max_profit :
                    max_profit=profit;
        return max_profit;
            


